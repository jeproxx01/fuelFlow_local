const express = require("express");
const http = require("http");
const { Server } = require("socket.io");
const cors = require("cors");
const cookieParser = require("cookie-parser");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const mysql = require("mysql2/promise");

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "http://localhost:3000",
    methods: ["GET", "POST", "PUT", "DELETE"],
    credentials: true,
  },
});

// Database connection pool
const pool = mysql.createPool({
  host: process.env.MYSQL_HOST || "localhost",
  user: process.env.MYSQL_USER || "root",
  password: process.env.MYSQL_PASSWORD || "",
  database: process.env.MYSQL_DATABASE || "fuelflow",
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
});

// Middleware
app.use(
  cors({
    origin: "http://localhost:3000",
    credentials: true,
  })
);
app.use(express.json());
app.use(cookieParser());

// Socket.IO connection handling
io.on("connection", (socket) => {
  console.log("A user connected");

  socket.on("disconnect", () => {
    console.log("User disconnected");
  });
});

// Authentication middleware
const authenticateToken = async (req, res, next) => {
  const token = req.cookies.token;

  if (!token) {
    return res.status(401).json({ message: "Not authenticated" });
  }

  try {
    const decoded = jwt.verify(
      token,
      process.env.JWT_SECRET || "your-secret-key"
    );
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(401).json({ message: "Invalid token" });
  }
};

// Office Staff Routes

// Get current user profile
app.get("/api/office-staff/me", authenticateToken, async (req, res) => {
  try {
    const [users] = await pool.execute(
      `SELECT 
        u.id,
        u.username,
        u.email,
        os.department,
        os.full_name,
        os.age,
        os.sex,
        os.contact_no
       FROM users u 
       INNER JOIN office_staff os ON u.id = os.user_id 
       WHERE u.id = ? AND u.role = 'office_staff'`,
      [req.user.id]
    );

    const user = users[0];

    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    res.json({
      user: {
        id: user.id,
        username: user.username,
        email: user.email,
        department: user.department,
        full_name: user.full_name,
        age: user.age,
        sex: user.sex,
        contact_no: user.contact_no,
      },
    });
  } catch (error) {
    console.error("Error fetching user data:", error);
    res.status(500).json({ message: "Internal server error" });
  }
});

// Update office staff profile
app.put("/api/office-staff/update", authenticateToken, async (req, res) => {
  const {
    username,
    email,
    fullName,
    age,
    sex,
    contactNo,
    currentPassword,
    newPassword,
  } = req.body;

  const connection = await pool.getConnection();
  try {
    await connection.beginTransaction();

    if (currentPassword && newPassword) {
      const [users] = await connection.execute(
        "SELECT password FROM users WHERE id = ?",
        [req.user.id]
      );

      if (users.length === 0) {
        throw new Error("User not found");
      }

      const isPasswordValid = await bcrypt.compare(
        currentPassword,
        users[0].password
      );

      if (!isPasswordValid) {
        throw new Error("Current password is incorrect");
      }

      const hashedPassword = await bcrypt.hash(newPassword, 10);
      await connection.execute("UPDATE users SET password = ? WHERE id = ?", [
        hashedPassword,
        req.user.id,
      ]);
    }

    if (username || email) {
      const [existingUsers] = await connection.execute(
        "SELECT id, username, email FROM users WHERE (username = ? OR email = ?) AND id != ?",
        [username || "", email || "", req.user.id]
      );

      if (existingUsers.length > 0) {
        const existing = existingUsers[0];
        if (username && existing.username === username) {
          throw new Error("Username already taken");
        }
        if (email && existing.email === email) {
          throw new Error("Email already registered");
        }
      }

      const updates = [];
      const values = [];
      if (username) {
        updates.push("username = ?");
        values.push(username);
      }
      if (email) {
        updates.push("email = ?");
        values.push(email);
      }

      if (updates.length > 0) {
        await connection.execute(
          `UPDATE users SET ${updates.join(", ")} WHERE id = ?`,
          [...values, req.user.id]
        );
      }
    }

    if (fullName || age || sex || contactNo) {
      const updates = [];
      const values = [];
      if (fullName) {
        updates.push("full_name = ?");
        values.push(fullName);
      }
      if (age) {
        updates.push("age = ?");
        values.push(age);
      }
      if (sex) {
        updates.push("sex = ?");
        values.push(sex);
      }
      if (contactNo) {
        updates.push("contact_no = ?");
        values.push(contactNo);
      }

      if (updates.length > 0) {
        await connection.execute(
          `UPDATE office_staff SET ${updates.join(", ")} WHERE user_id = ?`,
          [...values, req.user.id]
        );
      }
    }

    await connection.commit();

    // Emit profile update event
    io.emit("profileUpdated", { userId: req.user.id });

    res.json({ message: "Profile updated successfully" });
  } catch (error) {
    await connection.rollback();
    console.error("Error updating office staff profile:", error);
    res
      .status(500)
      .json({ message: error.message || "Error updating profile" });
  } finally {
    connection.release();
  }
});

// Login route
app.post("/api/office-staff/login", async (req, res) => {
  try {
    const { username, password } = req.body;

    if (!username || !password) {
      return res
        .status(400)
        .json({ message: "Username and password are required" });
    }

    const [users] = await pool.execute(
      `SELECT u.*, os.id as staff_id, os.department 
       FROM users u 
       INNER JOIN office_staff os ON u.id = os.user_id 
       WHERE u.username = ? AND u.role = 'office_staff'`,
      [username]
    );

    const user = users[0];

    if (!user) {
      return res.status(401).json({ message: "Invalid credentials" });
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);

    if (!isPasswordValid) {
      return res.status(401).json({ message: "Invalid credentials" });
    }

    const token = jwt.sign(
      {
        id: user.id,
        staff_id: user.staff_id,
        username: user.username,
        role: "office_staff",
        department: user.department,
      },
      process.env.JWT_SECRET || "your-secret-key",
      { expiresIn: "1d" }
    );

    res.cookie("token", token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "lax",
      maxAge: 24 * 60 * 60 * 1000, // 1 day
    });

    res.json({
      message: "Login successful",
      user: {
        id: user.id,
        staff_id: user.staff_id,
        username: user.username,
        department: user.department,
      },
    });
  } catch (error) {
    console.error("Login error:", error);
    res.status(500).json({ message: "Internal server error" });
  }
});

// Logout route
app.post("/api/office-staff/logout", (req, res) => {
  res.cookie("token", "", {
    httpOnly: true,
    expires: new Date(0),
    path: "/",
  });
  res.json({ message: "Logged out successfully" });
});

const PORT = process.env.PORT || 5000;
server.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
